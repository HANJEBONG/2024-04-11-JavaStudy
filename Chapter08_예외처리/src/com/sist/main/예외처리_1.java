package com.sist.main;
/*
 *     8장 => 263page
 *     => 예외처리
 *        = 최적화 : 실행 속도
 *        = 가독성 : 보기 편하게 => 쉽게
 *        = 견고성 : 프로그램이 비정상 종료가 안되게
 *        -------- 예외처리 (에러를 사전에 방지 => 비정상 종료를 방지하는 프로그램)
 *     => 자바
 *        에러 =====> 수정이 불가능한 에러 (메모리가 부족 , 스레드 충돌)
 *        예외처리 ==> 소스상에서 수정이 가능한 에러 (파일명 오류 , URL주소 오류)
 *        에러가 발생하는 요소
 *        --------------
 *        1. 사용자의 입력 부주의 : 잘못된 입력이 있는 경우 (정수 => 문자명)
 *           -------------- if(조건문 처리) => 유효성 검사
 *        2. 프로그래머의 실수 : 배열의 범위 초과 , 반복수행... 클래스 메모리 할당이 없는 상태에서 사용
 *                         변수의 초기화가 없는 상태 ... , 잘못된 입력
 *     => 예외처리
 *           = 사전에 에러 방지
 *           = 비정상 종료를 방지하고 => 정상 상태 유지
 *           = 예외처리 => 에러발생시 에러부분을 건너뛴다
 *             ------------------------------- 에러를 수정해 주는 것은 아니다
 *     => 예외처리 방법
 *       ------------------------------------
 *        = 예외 복구 : try ~ catch
 *                   ---   ------
 *                   정상수행  에러발생시 처리 => 복구
 *        = 예외 회피 : 처리하지 않고 => 예외 발생시 시스템에 의해 처리
 *                   메소드 뒤에 첨부
 *                   메소드() throws 예외처리
 *       ------------------------------------
 *        = 임의 발생 : 테스트용으로 주로 사용 => 프로그램이 정상적인지 확인
 *                   throw => 에러를 발생 => 확인 (견고한)
 *        = 사용자 정의 예외 : 자바에서 지원하지 않는 예외처리가 존재 => 필요시 직접 예외처리를 만들어서 사용
 *     => 예외처리의 상속도 => 처리하는 순서가 존재
 *                     Object
 *                       |
 *                  Throwable : 예외 처리 최상위 클래스
 *                       |
 *              ----------------------------------------
 *              |                                      |
 *            Error                                 Exception
 *            => 처리가 불가능                          => 처리가 가능 (소스상)
 *            => 종료후에 다시 시작                      => 0으로 나누는 경우
 *                                                  => URL주소가 트리다 , IP가 틀리다 , 파일이 틀리다
 *                         처리가 가능한 에러 => 예외처리
 *                               Exception
 *                                  |
 *               -----------------------------------------
 *               |                                       |
 *            (CheckedException)                  (UnCheckedException)
 *            => 컴파일시에 예외처리를 확인               => 컴파일시에 예외를 확인하지 않는다
 *            => 반드시 예외처리를 한 후에 사용            => 필요시에 예외처리를 한다
 *            **=> java.io : 파일                    => 사용자 입력을 받는 경우
 *                                                     -------
 *            **=> java.sql : 오라클 연걸              => 실행시 에러
 *            => java.lang : 쓰레드 관련             => java
 *            **=> java.net : 네트워크
 *            => 오픈 API : Jsoup
 *            **=> 웹(네트워크) => 반드시 예외처리
 *            => javac
 *            
 *            ChekchedException
 *            ------------------ 반드시 예외처리를 해서 사용한다 (컴ㅁ파일시에 예외처리가 되어 있는지 확인)
 *                     |
 *               FileNotException
 *               IOException
 *               ----------------- 파일과 관련
 *               SQLException
 *               ----------------- SQL(오라클 연동)
 *               URLMalformedException
 *               ---------------------- URL(network)
 *               ClassNotFoundExection
 *                 Class.forName() => 클래스명으로 메모리 할당
 *               ---------------------- 리플렉션
 *               InterrupedException
 *                 Thread.sleep() => 충돌
 *                 => 쓰레드는 프로그램안에서 여러개의 프로그램을 동시에 실행
 *               ---------------------- 쓰레드 관련
 *            
 *            UnCheckedException : 필요시에만 예외처리를 한다 => 예외처리를 생략할 수 있다
 *                                 => 지금까지 사용한 클래스
 *                    |
 *               ArrayIndexOutOfBoundsException => 배열범위 초과
 *               CLassCastException => 클래스 형변환   
 *               ArithmeticException => 산술 오류 => 0으로 나누는 경우
 *               NullPointerException => 메ㅔ모리할당이 없는 상태에서 객체 사용시....
 *               -------------------- String , 윈도우 관련
 *                                    ------ 멤버변수 선언시 => 자동 초기화 => null, 크롤링 => 데이터가 없는 경우
 *     
 *     *** 프로그램 제작
 *         1. 설계 => 벤치마킹 (웹 , 게임 , ...) => 모방 => 새로운 내용을 만든다
 *         2. 변수 설정 => 초기화 필요성 여부
 *            => 생성자 (인스턴스)
 *            => static => static 블록을 이용한다
 *         3. 기능 설정 => 메소드
 *            --------------
 *            = 예상되는 에러를 추출 => 예외처리 처리를 한다 => 프로그램의 종료 방지
 *     *** 예외처리 실무 : 한개의 상위 클래스를 이용하는 경우가 있다
 *         상속도 => 상속을 내리는 클래스는 하위 클래스의 예외를 포함하고 있다
 *         => 한번에 처리가 가능하다
 *         
 *         예)
 *            배열을 선언 => ArrayIndexOutOfBoundsException
 *            정수를 입력 받아서 => 정수가 입력이 안된 경우 => NumberFormationException
 *            나누기 한다 => ArithmeticException
 *            ----------------------------------------------------------------
 *            => 나눠서 잡는다
 *            => 통합해서 잡는다
 *            
 *            try
 *            {
 *                배열을 선언
 *                정수 입력
 *                나누기
 *                ===========> 평상시에 코딩 => 실행 가능한 프로그램을 서술
 *            }catch(ArrayIndexOutOfBoundsException) => 다중 조건
 *            {
 *            }catch(NumberFormationException)
 *            {
 *            }catch(ArithmeticException)
 *            {
 *            }
 *            
 *            try
 *            {
 *                배열을 선언
 *                정수 입력
 *                나누기
 *                ===========> 평상시에 코딩 => 실행 가능한 프로그램을 서술
 *            }catch(RuntimeException) => 다중 조건
 *            {
 *            }
 *            
 *            
 *            try
 *            {
 *                배열을 선언
 *                정수 입력
 *                나누기
 *                ===========> 평상시에 코딩 => 실행 가능한 프로그램을 서술
 *            }catch(Throwable) => 다중 조건
 *            {
 *            }
 *            
 *            => 위로 올라갈수록 => 예외처리 기능을 많이 가지고 있다
 *                             ------------------------- 예외처리 기능을 포함한다
 *                            
 *       1. 예외처리 형식
 *          ------ 에러가 발생시에 건너뛰는 역할
 *                             ----- 에러를 처리해주는 것은 아니다
 *                             
 *         try
 *         {
 *             정상수행을 할 수 있는 소스
 *             1. 에러가 없는 경우 => try에서 종료
 *             2. 에러가 있는 경우 => 해당 에러를 등록한 catch를 찾는다
 *         }catch(예외처리클래스)
 *         {
 *             에러발생시 복구하는 위치
 *         }
 *         소스 코딩을 수행
 *     
 */
class A{
	
}
class B extends A{
	
}
public class 예외처리_1 {
    String name;
    public void display() {
    	name=name.substring(0,1);
    	System.out.println(name);
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*int[] arr=new int[2];
		arr[0]=10;
		arr[2]=20;// 예외발생 부분 (배열의 범위 초과) => 비정상 종료
		System.out.println(arr[0]+","+arr[1]);*/
//		A a=new A();
//		// => 메소드가 A가 가지고 있는 메소드 호출
//		B b=(B)a;
		//System.out.println(10/0);


	}

}
