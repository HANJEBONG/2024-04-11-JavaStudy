package com.sist.main;

/*
 *     클래스 구성요소
 *     -----------
 *     
 *     ------------------------------------------------------------
 *      변수 : 프로그램에 필요한 데이터를 저장공간 => 프로그램까지 유지하는 변수=> 멤버변수
 *     ------------------------------------------------------------
 *      변수 => 초기화 (변수는 초기값이 없는 상태에서는 메모리에 저장이 되어있지 않다
 *       생성자
 *        1) 리턴형이 있다 => 
 *        2) 리턴형이 없다 => void
 *        3) 여러개의 생성자를 만들 수 있다
 *           --------- 같은 이름의 메소드를 여러개 제작이 가능 (오버로딩)
 *           = ***오버로딩 : 같은 이름의 메소드로 새로운 기능을 추가
 *            1. 메소드명이 동일
 *            2. 매개변수의 갯수나 데이터형이 다르다
 *            3. 리턴형은 관계없다
 *            4. 접근지정어는 관련이 없다
 *            예)
 *               plus(int a,int b)    => plus(int,int)
 *               plus(double d, double d2) => plus(double,double)
 *               plus(int a, double d)
 *               plus(byte b,int i)
 *               plus(char c, char k)
 *        4) 생성자의 역할 => 역할이 필오없는 경우도 있기 때문에 생략이 가능
 *           ** 반드시 생성자는 필요하다
 *           ** 생략이 된 경우에는 생성자를 추가 (컴파일러)
 *           1. 멤버변수의 초기화 담당
 *           2. 클래스를 메모리에 저장할때 호출되는 메소드
 *              -----------------------------
 *           3. 시작과 동시에 처리해야하는 기능이
 *        5) 생성자 호출
 *          => new 생성자()
 *             --- new가 없이 호출하면 오류 발생
 *      초기화 블록 : 호출없이 자동으로 처리
 *      클래스에서는 선언 / 선언과 동시에 초기화
 *     ------------------------------------------------------------
 *      메소드 : 특정기능을 수행하는 명령문의 집합
 *             -----
 *              검색 , 목록 ,페이지 나누기 , 예약 , 결제 , 회원가입 , 회원 탈퇴
 *             1. 재사용
 *             2. 기능별로 나눠져있다 => 수집
 *             3. 반복 기능을 제거
 *             4. 구조적 프로그램 (2번 동일)
 *             5. 역할 : 기능 수행 , 다른 클래스 연결
 *                               ---------
 *              => 객체 지향 프로그램
 *                 여러개 클래스를 모아서 조립하는 프로그램 => 다른 클래스와 연동
 *      
 *     ------------------------------------------------------------
 *      ** 접근지정어
 *       private : 자신의 클래스안에서만 사용 => 다른클래스와 연결할수없다 => 멤버변수 (데이터 보호)
 *       default : 키워드가 없는 상태 => 같은 패키지 안에서만 접근이 가능
 *       protected : 같은 패키지 안에서만 접근이 가능 + 상속을 받은 경우에는 다른 패키지 접근이 가능
 *       public : Open 모드 => 패키지와 관계없이 모든 클래스에서 접근이 가능
 *       
 *       private : 접근 거부 => 다른 클래스에서 사용이 안됨 => 개인정보 => 멤버변수
 *       public : 접근 가능 => 다른클래스와 연결 가능 => 생성자 / 클래스 / 메소드 / 인터페이스-
 *       ---------------------------------------------------------
 *       
 *       **옵션
 *        = 메소드 호출
 *       
 */
public class 클래스구성요소_변수 {
	/*
	 *      인스턴스 : 객체
	 *      ------ 클래스의 내용 (메소드 , 변수) => 메모리에 저장한 상태 => 각자 따로 저장 => new를 이욯해야 사용이 가능
	 *      
	 *      인스턴스 : 변수 / 메소드
	 *      static : 변수 / 메소드
	 *      
	 *      class A
	 *      {
	 *          private int a=10; => 객체 자신이 가지고 있는 변수
	 *          private static int a=20; => 객체마다 공통으로 사용되는 변수
	 *          
	 *          public void aaa(){ => 객체 자신이 가지고 있는 메소드
	 *          }
	 *          public static void bbb(){ => 객체마다 공통으로 사용되는 메소드
	 *          }
	 *          public void ccc(){ => 객체 자신이 가지고 있는 메소드
	 *          }
	 *      }
	 */
    public void aaa() {
    	
    }
    public void bbb() {
    	
    }
    public void ccc() {
    	
    }
    public void ddd() {
	
}
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
